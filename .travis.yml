# Copyright (c) 2015-2020 Morwenn
# SPDX-License-Identifier: MIT

language: cpp
dist: bionic
sudo: required

_packages:
  - &clang clang-10
  - &gcc g++-10

_apt: &apt-common
  sources:
    - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main
      key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
    - ubuntu-toolchain-r-test

cache:
  ccache: true
  directories:
    - build
    - .mtime_cache

matrix:
  include:

    # Linux clang
    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
            - valgrind
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=address CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    - os: linux
      sudo: required
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *clang
            - *gcc
      compiler: clang

    # Linux gcc
    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
            - valgrind
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Debug SANITIZE=undefined CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: required
      env: BUILD_TYPE=Debug SANITIZE=address,pointer-compare,pointer-subtract CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    - os: linux
      sudo: false
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Unix Makefiles"
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
      compiler: gcc

    # OSX clang
#    - os: osx
#      osx_image: xcode12
#      env: BUILD_TYPE=Debug USE_VALGRIND=true CMAKE_GENERATOR="Xcode"
#      addons:
#        homebrew:
#          update: true
#          packages:
#            - ccache
#            - cmake
#            - valgrind
#      compiler: clang

    - os: osx
      osx_image: xcode12
      env: BUILD_TYPE=Release CMAKE_GENERATOR="Xcode"
      addons:
        homebrew:
          update: true
          packages:
            - ccache
            - cmake
      compiler: clang

    # Windows GCC
#    - os: windows
#      language: sh
#      env: BUILD_TYPE=Debug CMAKE_GENERATOR="MinGW Makefiles"
#      compiler: gcc

#    - os: windows
#      language: sh
#      env: BUILD_TYPE=Release CMAKE_GENERATOR="MinGW Makefiles"
#      compiler: gcc

    # Code coverage
    - os: linux
      sudo: false
      if: branch in (master, develop)
      env: BUILD_TYPE=Debug CMAKE_GENERATOR="Unix Makefiles" ENABLE_COVERAGE=true
      addons:
        apt:
          <<: *apt-common
          packages:
            - *gcc
            - lcov
      compiler: gcc

before_install:
  - if [[ $TRAVIS_OS_NAME = "linux" && $CXX = "clang++" ]]; then
        sudo ln -s $(which ccache) /usr/lib/ccache/clang++;
        export CXXFLAGS="-Qunused-arguments";
    fi

install:
  - gem install mtime_cache
  - if [[ $TRAVIS_OS_NAME = "osx" ]]; then
        export PATH="/usr/local/opt/ccache/libexec:$PATH";
    fi
  - if [[ $CXX = "g++" ]]; then export CXX="g++-10"; fi
  - if [[ $CXX = "clang++" ]]; then export CXX="clang++-10"; fi

script:
  - cmake -H. -Bbuild
          -DCMAKE_CXX_COMPILER="${CXX}"
          -DCMAKE_CONFIGURATION_TYPES="${BUILD_TYPE}"
          -DCMAKE_BUILD_TYPE="${BUILD_TYPE}"
          -DSANITIZE="${SANITIZE}"
          -DUSE_VALGRIND=${USE_VALGRIND}
          -DENABLE_COVERAGE=${ENABLE_COVERAGE}
          -G"${CMAKE_GENERATOR}"
          -DCMAKE_SH="CMAKE_SH-NOTFOUND"
          -DBUILD_EXAMPLES=ON
  - mtime_cache -g mtime_cache_globs.txt -c .mtime_cache/cache.json
  - cmake --build build --config ${BUILD_TYPE} -j 2
  - cd build
  - if [[ $USE_VALGRIND = true ]]; then
        travis_wait 50 ctest -T memcheck -C ${BUILD_TYPE} --output-on-failure -j 4;
    else
        travis_wait ctest -C ${BUILD_TYPE} --output-on-failure;
    fi
  - if [[ $TRAVIS_OS_NAME = "windows" ]]; then
        cd ..;
    fi

after_success:
  - if [[ $TRAVIS_OS_NAME = "windows" ]]; then
        cd build;
    fi
  - if [[ $ENABLE_COVERAGE = true ]]; then
        make gcov;
        make lcov;
        bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi

after_failure:
  - if [[ $TRAVIS_OS_NAME = "windows" ]]; then
        cd build;
    fi
  - if [[ $USE_VALGRIND = true ]]; then
        find ./Testing/Temporary -type f -name "MemoryChecker.*.log" -size +1300c | xargs cat;
    fi

notifications:
  email: false
